%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.14.2 (Build 18C54) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 200 193
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 200 193
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
1 0.38431373 0.13333334 sc
q
36.769852 7.6769915 m
34.847916 5.3411002 32.516823 3.4863648 29.779274 2.1127856 c
27.041723 0.73920614 24.021534 0.051072422 20.721399 0.051072422 c
17.870794 0.051072422 15.195155 0.5698607 12.697174 1.6101253 c
10.199192 2.6503899 8.0242262 4.0642896 6.1776581 5.8572006 c
4.3283982 7.6474233 2.8721399 9.7521448 1.8061911 12.165989 c
0.74024224 14.579833 0.20726784 17.17915 0.20726784 19.961254 c
0.20726784 22.743357 0.74024224 25.342674 1.8061911 27.756517 c
2.8721399 30.170362 4.33109 32.283146 6.1776581 34.0895 c
8.0269175 35.895851 10.199192 37.312439 12.697174 38.336575 c
15.195155 39.36071 17.868103 39.871433 20.721399 39.871433 c
24.018843 39.871433 27.03903 39.1833 29.779274 37.807034 c
32.516823 36.430767 34.799461 34.640545 36.624496 32.433678 c
31.483177 27.157089 l
30.298788 28.853231 28.769852 30.218746 26.893675 31.25901 c
25.020189 32.299274 22.96097 32.818066 20.718708 32.818066 c
18.925976 32.818066 17.235531 32.473999 15.650067 31.785864 c
14.064603 31.097731 12.678331 30.170362 11.493943 29.003761 c
10.309556 27.834471 9.3728132 26.47702 8.6837149 24.926031 c
7.9946165 23.375042 7.6500673 21.719219 7.6500673 19.961254 c
7.6500673 18.232855 7.9946165 16.59585 8.6837149 15.044861 c
9.3728132 13.493872 10.309556 12.133733 11.493943 10.967131 c
12.678331 9.7978411 14.064603 8.8731613 15.650067 8.1850281 c
17.235531 7.4968944 18.925976 7.1528273 20.718708 7.1528273 c
23.087482 7.1528273 25.187078 7.6877437 27.012114 8.7602644 c
28.837147 9.8300972 30.358007 11.246685 31.577389 13.004652 c
36.769852 7.6769915 l
h
W*
0 0 200 193 rc
-4.7927322 44.871433 m
41.769852 44.871433 l
41.769852 -4.9489274 l
-4.7927322 -4.9489274 l
h
f
Q
q
62.231495 0.3360028 m
55.313595 0.3360028 l
55.313595 2.2552507 l
54.096905 1.4219638 52.807537 0.84672701 51.445492 0.52954042 c
50.083447 0.20966575 48.683716 0.048384402 47.240913 0.048384402 c
45.89502 0.048384402 44.678329 0.24729805 43.588158 0.64781338 c
42.497982 1.0483286 41.553162 1.6235654 40.7537 2.3762116 c
39.95155 3.1288579 39.335129 4.0159054 38.904442 5.0400419 c
38.471062 6.0641785 38.255718 7.1985235 38.255718 8.4457664 c
38.255718 10.012883 38.600269 11.381086 39.289368 12.547688 c
39.978466 13.71429 40.915207 14.690042 42.099598 15.474944 c
43.283985 16.257158 44.670258 16.843147 46.255718 17.224846 c
47.841183 17.609234 49.547779 17.800083 51.372814 17.800083 c
55.359352 17.800083 l
55.359352 19.431713 54.831764 20.727341 53.773891 21.686964 c
52.716015 22.646587 51.195156 23.127745 49.208614 23.127745 c
48.247646 23.127745 47.254375 22.950335 46.228802 22.600891 c
45.203232 22.24876 44.177658 21.609011 43.154778 20.681643 c
39.071331 24.807758 l
40.543743 26.213593 42.250336 27.302242 44.188427 28.071016 c
46.126514 28.83979 48.121132 29.221491 50.169582 29.221491 c
52.091522 29.221491 53.803501 28.917744 55.302826 28.310251 c
56.802155 27.702757 58.013458 26.917854 58.936745 25.958231 c
60.145355 24.743246 60.995964 23.383106 61.48856 21.880501 c
61.981159 20.377897 62.228802 18.455961 62.228802 16.122757 c
62.228802 0.3360028 l
62.231495 0.3360028 l
h
55.313595 7.6769915 m
55.313595 12.811114 l
48.083447 13.02078 46.476448 11.972451 46.476448 11.972451 c
45.851952 11.668705 45.35397 11.276254 44.987888 10.797786 c
44.61911 10.316629 44.436069 9.7413931 44.436069 9.0693874 c
44.436069 8.1097631 44.81292 7.3248606 45.563931 6.7173676 c
46.314938 6.1098747 47.283985 5.806128 48.471062 5.806128 c
48.471062 5.806128 51.213997 5.6045265 55.313595 7.6769915 c
h
W
0 0 200 193 rc
33.255718 34.221489 m
67.231491 34.221489 l
67.231491 -4.9516158 l
33.255718 -4.9516158 l
h
f
Q
q
87.935394 8.5398464 m
87.935394 7.1635795 87.615074 5.9405293 86.971733 4.8706965 c
86.3284 3.7981756 85.493942 2.903064 84.468369 2.1826742 c
83.442802 1.4622841 82.285332 0.9193036 81.001343 0.55104458 c
79.717361 0.18278551 78.449532 0 77.197845 0 c
75.079407 0 73.127861 0.39245126 71.345894 1.1746657 c
69.563927 1.9568802 68 3.2148747 66.651413 4.9405851 c
70.831764 9.1634684 l
71.663528 8.1070747 72.624496 7.2845402 73.714668 6.6931753 c
74.802155 6.1018105 75.973083 5.806128 77.222076 5.806128 c
78.309555 5.806128 79.21669 6.0050416 79.935394 6.4055572 c
80.656799 6.8060722 81.017494 7.4055014 81.017494 8.2038441 c
81.017494 9.0344429 80.506058 9.7306404 79.480484 10.289749 c
78.45491 10.848858 77.014809 11.399902 75.157471 11.945571 c
74.067291 12.265446 73.012115 12.674026 71.986542 13.168621 c
70.960968 13.663218 70.048454 14.273398 69.248993 14.9911 c
68.446838 15.711491 67.80619 16.534025 67.327049 17.461393 c
66.845222 18.38876 66.605652 19.461281 66.605652 20.676268 c
66.605652 22.020279 66.9179 23.227201 67.54509 24.297033 c
68.172272 25.369555 68.990578 26.264666 70 26.985056 c
71.012115 27.705446 72.158813 28.256491 73.442802 28.640877 c
74.726784 29.025265 76.026917 29.216114 77.343201 29.216114 c
81.580078 29.216114 85.047104 27.616741 87.744278 24.417994 c
83.612381 20.243496 l
82.810226 21.235376 81.897713 22.017591 80.874832 22.595516 c
79.849258 23.170752 78.729477 23.45837 77.512787 23.45837 c
77.095558 23.45837 76.656799 23.401922 76.191116 23.291714 c
75.725441 23.178816 75.294754 23.020224 74.893677 22.810556 c
74.492599 22.600891 74.1642 22.329401 73.908478 21.996086 c
73.652756 21.660084 73.523552 21.28376 73.523552 20.869804 c
73.523552 20.133287 74.010765 19.493538 74.987885 18.950558 c
75.965004 18.407578 77.367432 17.861908 79.192467 17.318928 c
80.376854 16.966797 81.499329 16.517897 82.554512 15.974916 c
83.612381 15.431936 84.541046 14.800251 85.340515 14.079861 c
86.139977 13.35947 86.772545 12.545 87.23822 11.63376 c
87.703903 10.722521 87.935394 9.69032 87.935394 8.5398464 c
h
W*
0 0 200 193 rc
61.605652 34.216114 m
92.935394 34.216114 l
92.935394 -5 l
61.605652 -5 l
h
f
Q
q
98.360703 35.914665 m
100.61911 35.914665 l
100.57335 29.216114 l
107.58816 29.216114 l
107.63392 22.307898 l
100.61911 22.307898 l
100.61911 9.69032 l
100.61911 8.9860582 100.70794 8.4108219 100.8829 7.9619222 c
101.05788 7.5130224 101.29206 7.1608915 101.58008 6.905529 c
101.8681 6.650167 102.1965 6.4727578 102.56528 6.3786769 c
102.93405 6.281908 103.32705 6.2335238 103.74158 6.2335238 c
104.28533 6.2335238 104.94212 6.3302927 105.71198 6.521142 c
106.48183 6.7119918 107.13593 7.0318661 107.68237 7.4807658 c
107.68237 1.3870195 l
106.97712 0.93811977 106.16151 0.60480499 105.23284 0.37901115 c
104.30417 0.15590529 103.3755 0.043008357 102.44684 0.043008357 c
100.81292 0.043008357 99.434723 0.24192201 98.314941 0.64243734 c
97.192467 1.0429527 96.296097 1.6585097 95.623146 2.4891086 c
94.950203 3.3197076 94.46299 4.3761001 94.158813 5.6555991 c
93.854645 6.9350977 93.70121 8.4377022 93.70121 10.166101 c
93.70121 22.310585 l
90.051147 22.310585 l
90.051147 28.476908 l
97.951546 28.476908 98.360703 35.914665 98.360703 35.914665 c
W*
0 0 200 193 rc
85.051147 40.914665 m
112.68237 40.914665 l
112.68237 -4.9569917 l
85.051147 -4.9569917 l
h
f
Q
q
138.47914 14.633594 m
138.47914 12.682089 138.15074 10.827353 137.49126 9.0693874 c
136.83176 7.3087325 135.90848 5.7658076 134.72141 4.4406128 c
133.53432 3.1127298 132.12112 2.0563371 130.48183 1.2741226 c
128.84253 0.49190807 127.0471 0.099456824 125.08749 0.099456824 c
123.86541 0.099456824 122.72678 0.26880223 121.66891 0.60480499 c
120.60835 0.94080782 119.61238 1.4757242 118.68372 2.2122424 c
118.68372 0.30912256 l
111.76582 0.30912256 l
111.76582 40.589138 l
118.73217 40.589138 l
118.78062 27.154402 l
119.58008 27.794151 120.53567 28.304874 121.6393 28.689262 c
122.74563 29.073648 123.90578 29.264498 125.12247 29.264498 c
126.821 29.264498 128.46837 28.888176 130.06999 28.138218 c
131.6716 27.385571 133.09557 26.353371 134.34724 25.044304 c
135.59624 23.73255 136.59758 22.189625 137.35127 20.415529 c
138.10229 18.638746 138.47914 16.711435 138.47914 14.633594 c
h
131.46434 14.633594 m
131.46434 15.913092 131.27052 17.079693 130.8856 18.136086 c
130.50067 19.192478 129.95963 20.095655 129.27052 20.845613 c
128.57874 21.598259 127.76043 22.173496 126.81023 22.574011 c
125.86002 22.974527 124.80753 23.173441 123.65007 23.173441 c
122.90983 23.173441 122.05653 23.022911 121.09286 22.719164 c
120.1292 22.415419 119.32436 22.022966 118.68102 21.544498 c
118.68102 8.2065325 l
120.19112 6.8302646 121.89502 6.1421309 123.79273 6.1421309 c
124.8856 6.1421309 125.90578 6.3491087 126.85599 6.7657523 c
127.8035 7.1823955 128.61642 7.7656965 129.29205 8.5156546 c
129.9677 9.268301 130.49799 10.163412 130.8829 11.203677 c
131.27052 12.241254 131.46434 13.386351 131.46434 14.633594 c
h
W
0 0 200 193 rc
106.76582 45.589138 m
143.47914 45.589138 l
143.47914 -4.9005432 l
106.76582 -4.9005432 l
h
f
Q
q
171.48587 14.633594 m
171.48587 12.553064 171.10094 10.62844 170.33379 8.8516569 c
169.56393 7.0775628 168.50874 5.5400138 167.16286 4.2470751 c
165.81696 2.9514484 164.23956 1.927312 162.43068 1.1773537 c
160.62181 0.42470753 158.69179 0.051072422 156.64064 0.051072422 c
154.58951 0.051072422 152.66756 0.42739555 150.87483 1.1773537 c
149.07941 1.927312 147.5101 2.9568245 146.1642 4.2712674 c
144.8183 5.5830221 143.76312 7.125947 142.99327 8.9000416 c
142.22342 10.674136 141.84119 12.58532 141.84119 14.633594 c
141.84119 16.649611 142.23419 18.544666 143.0175 20.31876 c
143.80081 22.092855 144.86676 23.643845 146.21265 24.971727 c
147.55855 26.29961 149.12785 27.337187 150.92059 28.089832 c
152.71332 28.83979 154.61911 29.216114 156.63795 29.216114 c
158.6864 29.216114 160.61642 28.83979 162.42799 28.089832 c
164.23688 27.337187 165.81427 26.315739 167.16016 25.020111 c
168.50606 23.724485 169.56123 22.181561 170.33109 20.391336 c
171.10094 18.598427 171.48587 16.679178 171.48587 14.633594 c
h
164.56796 14.633594 m
164.56796 15.816323 164.3607 16.921101 163.94617 17.942549 c
163.53163 18.966684 162.96365 19.861797 162.24495 20.630571 c
161.52625 21.399345 160.6891 21.998774 159.73082 22.428858 c
158.77254 22.861629 157.75235 23.076672 156.66487 23.076672 c
155.57739 23.076672 154.55721 22.861629 153.59892 22.428858 c
152.64064 21.996086 151.8035 21.396658 151.08479 20.630571 c
150.36609 19.861797 149.80081 18.966684 149.38358 17.942549 c
148.96904 16.918413 148.76178 15.816323 148.76178 14.633594 c
148.76178 13.450864 148.96904 12.346087 149.38358 11.32195 c
149.79811 10.297813 150.36609 9.4027023 151.08479 8.6366158 c
151.8035 7.8678412 152.64064 7.2684121 153.59892 6.8383288 c
154.55721 6.4055572 155.58008 6.1905155 156.66487 6.1905155 c
157.74966 6.1905155 158.77254 6.4055572 159.73082 6.8383288 c
160.6891 7.2711 161.52625 7.8705292 162.24495 8.6366158 c
162.96365 9.4053898 163.52893 10.297813 163.94617 11.32195 c
164.358 12.346087 164.56796 13.448175 164.56796 14.633594 c
h
W
0 0 200 193 rc
136.84119 34.216114 m
176.48587 34.216114 l
176.48587 -4.9489274 l
136.84119 -4.9489274 l
h
f
Q
q
199.92732 0.44083565 m
192 0.44083565 l
186.23419 9.5935516 l
180.41992 0.44083565 l
172.4926 0.44083565 l
182.3903 15.254526 l
173.28668 29.283316 l
181.1171 29.283316 l
186.23419 20.770348 l
191.25438 29.283316 l
199.13324 29.283316 l
190.02962 15.254526 l
199.92732 0.44083565 l
h
W*
0 0 200 193 rc
167.4926 34.283314 m
204.92732 34.283314 l
204.92732 -4.5591645 l
167.4926 -4.5591645 l
h
f
Q
q
0 0 200 193 rc
120 0 0 140 40 54 cm
save
1080 45 cg_miaiproc 
385 -35 -35{
gsave 1 360 div 1 420 div scale 0 exch translate
currentfile 0 (EOD
)/SubFileDecode filter
L3?{flushfile}{cvx exec}ifelse
360 36 scale
BI
/Width 360
/Height 36
/BitsPerComponent 8
/Decode[
0 1
0 1
0 1
]
/DataSource ImageDataSource
/MaskedImage true
ID
EI
grestore} bind for
0 35 m 0 0 l 360 0 l 360 35 l h W n EOD
JcC<$JcC<$JcC<$JcC<$SH%(=PQ-46JcC<$JcC<$JcC<$\,XqXq#>pFJcC<$JcC<$JcC<$JcF0ue,Y("
h>`'+JcC<$JcC<$JcC<$mJkZ9_Z,2eJcC<$JcC<$JcC<$M#[;OgAlg)VuM>JJcC<$JcC<$JcDMFe,YI-
JcC<$JcC<$JcC<$JcEIae,]%=JcC<$JcC<$JcC<$JcC<$g&KP%JcF=$JcC<$JcC<$JcC<$JcGBBe,[,\
JcC<$JcC<$JcC<$JcCf2o)RbMJcDDCJcC<$JcC<$JcC<$WrLQKL&Z`(JcC<$JcC<$JcC<$`W+EflMlG8
JcC<$JcC<$JcC<$JcF[.e,Y("ci8RrJcC<$JcC<$JcC<$qu>.G[/Y^WJcC<$JcC<$JcC<$QN-:Okl?;7
RK%j<JcC<$JcC<$JcE"Te,Y("rr7QLJcC<$JcC<$JcC<$bl?/mj8X]1JcC<$JcC<$JcC<$JcFp5e,Y("
aT$hkJcC<$JcC<$JcC?%e,ZWNJcC<$JcC<$JcC<$JcD;@jT+cMJcCo5JcC<$JcC<$JcC<$\Gt%YJcGKE
JcC<$JcC<$JcC<$JcF4!e,\;(JcC<$JcC<$JcC<$JcC<$mf1c:JcERdJcC<$JcC<$JcC<$M>u'*VZ25I
JcC<$JcC<$JcC<$V#T9OpAfdEMuSA.JcC<$JcC<$JcELbe,Y("nGe(>JcC<$JcC<$JcC<$gAfY&ec14#
JcC<$JcC<$JcC<$JcGECe,Y("])R?]JcC<$JcC<$JcCi3e,Z-@JcC<$JcC<$JcC<$JcDeNf)YdMJcCE'
JcC<$JcC<$JcC<$`rFNgJcG!7JcC<$JcC<$JcC<$JcF^/e,[eoJcC<$JcC<$JcC<$JcC<$r;Y7HJcE(V
JcC<$JcC<$JcC<$QiGP8R/_a;JcC<$JcC<$JcC<$ZN&DSrVqHKJcC<$JcC<$JcC<$JcF!pJ,
~> 0 36 m 0 0 l 360 0 l 360 36 l h W n EOD
e,Y("Y5a(QJcC<$JcC<$JcD8?e,Y^4JcC<$JcC<$JcC<$JcE4Ze,]:DJcC<$JcC<$JcC<$JcC<$df7es
JcFR+JcC<$JcC<$JcC<$JcG-;e,[AcJcC<$JcC<$JcC<$JcCQ+q>f7MJcDYJJcC<$JcC<$JcC<$U]8gD
N;nJ/JcC<$JcC<$JcC<$^Al[_nc+1?JcC<$JcC<$JcC<$JcFF'e,Y("f)L=$JcC<$JcC<$JcC<$o`*D@
]DmH^JcC<$JcC<$JcC<$O8neOiW+Q0T`9TCJcC<$JcC<$JcDbMe,Y4&JcC<$JcC<$JcC<$JcE^he,\e6
JcC<$JcC<$JcC<$JcC<$i;_:,JcF'rJcC<$JcC<$JcC<$JcGWIe,ZlUJcC<$JcC<$JcC<$JcD&9li?8M
JcD/<JcC<$JcC<$JcC<$Z2`;RJcG`LJcC<$JcC<$JcC<$JcEsoe,\P/JcC<$JcC<$JcC<$JcC<$kPs$3
JcEgkJcC<$JcC<$JcC<$K)a=#XoEtPJcC<$JcC<$JcC<$Sc@dOn,S%>P5g+5JcC<$JcC<$JcE7[e,Y("
p]#gEJcC<$JcC<$JcC<$e,Rnth#Ds*JcC<$JcC<$JcC<$JcG0<e,Y("_>f)dJcC<$JcC<$JcCT,e,ZBG
JcC<$JcC<$JcC<$JcDPGh>m9MJcCZ.JcC<$JcC<$JcC<$^]2d`JcG6>JcC<$JcC<$JcC<$JcFI(e,\&!
JcC<$JcC<$JcC<$JcC<$p&EMAJcE=]JcC<$JcC<$JcC<$OT3f1TDsKBJcC<$JcC<$JcC<$X8gcOrW%NL
K`?W'JcC<$JcC<$JcEaie,Y("l2Q>7JcC<$JcC<$JcC<$iW%C-cMrIqJcC<$JcC<$JcC<$JcGZJe,Y("
Zi>UVJcC<$JcC<$JcD):e,Ym9JcC<$JcC<$JcC<$JcE%Ue,]IIJcC<$JcC<$JcC<$JcC<$c2W:
~> 0 36 m 0 0 l 360 0 l 360 36 l h W n EOD
e,Y("Y5a(QJcC<$JcC<$JcD8?e,Y^4JcC<$JcC<$JcC<$JcE4Ze,]:DJcC<$JcC<$JcC<$JcC<$df7es
JcFR+JcC<$JcC<$JcC<$JcG-;e,[AcJcC<$JcC<$JcC<$JcCQ+q>f7MJcDYJJcC<$JcC<$JcC<$U]8gD
N;nJ/JcC<$JcC<$JcC<$^Al[_nc+1?JcC<$JcC<$JcC<$JcFF'e,Y("f)L=$JcC<$JcC<$JcC<$o`*D@
]DmH^JcC<$JcC<$JcC<$O8neOiW+Q0T`9TCJcC<$JcC<$JcDbMe,Y4&JcC<$JcC<$JcC<$JcE^he,\e6
JcC<$JcC<$JcC<$JcC<$i;_:,JcF'rJcC<$JcC<$JcC<$JcGWIe,ZlUJcC<$JcC<$JcC<$JcD&9li?8M
JcD/<JcC<$JcC<$JcC<$Z2`;RJcG`LJcC<$JcC<$JcC<$JcEsoe,\P/JcC<$JcC<$JcC<$JcC<$kPs$3
JcEgkJcC<$JcC<$JcC<$K)a=#XoEtPJcC<$JcC<$JcC<$Sc@dOn,S%>P5g+5JcC<$JcC<$JcE7[e,Y("
p]#gEJcC<$JcC<$JcC<$e,Rnth#Ds*JcC<$JcC<$JcC<$JcG0<e,Y("_>f)dJcC<$JcC<$JcCT,e,ZBG
JcC<$JcC<$JcC<$JcDPGh>m9MJcCZ.JcC<$JcC<$JcC<$^]2d`JcG6>JcC<$JcC<$JcC<$JcFI(e,\&!
JcC<$JcC<$JcC<$JcC<$p&EMAJcE=]JcC<$JcC<$JcC<$OT3f1TDsKBJcC<$JcC<$JcC<$X8gcOrW%NL
K`?W'JcC<$JcC<$JcEaie,Y("l2Q>7JcC<$JcC<$JcC<$iW%C-cMrIqJcC<$JcC<$JcC<$JcGZJe,Y("
Zi>UVJcC<$JcC<$JcD):e,Ym9JcC<$JcC<$JcC<$JcE%Ue,]IIJcC<$JcC<$JcC<$JcC<$c2W:
~> 0 36 m 0 0 l 360 0 l 360 36 l h W n EOD
e,Y("Y5a(QJcC<$JcC<$JcD8?e,Y^4JcC<$JcC<$JcC<$JcE4Ze,]:DJcC<$JcC<$JcC<$JcC<$df7es
JcFR+JcC<$JcC<$JcC<$JcG-;e,[AcJcC<$JcC<$JcC<$JcCQ+q>f7MJcDYJJcC<$JcC<$JcC<$U]8gD
N;nJ/JcC<$JcC<$JcC<$^Al[_nc+1?JcC<$JcC<$JcC<$JcFF'e,Y("f)L=$JcC<$JcC<$JcC<$o`*D@
]DmH^JcC<$JcC<$JcC<$O8neOiW+Q0T`9TCJcC<$JcC<$JcDbMe,Y4&JcC<$JcC<$JcC<$JcE^he,\e6
JcC<$JcC<$JcC<$JcC<$i;_:,JcF'rJcC<$JcC<$JcC<$JcGWIe,ZlUJcC<$JcC<$JcC<$JcD&9li?8M
JcD/<JcC<$JcC<$JcC<$Z2`;RJcG`LJcC<$JcC<$JcC<$JcEsoe,\P/JcC<$JcC<$JcC<$JcC<$kPs$3
JcEgkJcC<$JcC<$JcC<$K)a=#XoEtPJcC<$JcC<$JcC<$Sc@dOn,S%>P5g+5JcC<$JcC<$JcE7[e,Y("
p]#gEJcC<$JcC<$JcC<$e,Rnth#Ds*JcC<$JcC<$JcC<$JcG0<e,Y("_>f)dJcC<$JcC<$JcCT,e,ZBG
JcC<$JcC<$JcC<$JcDPGh>m9MJcCZ.JcC<$JcC<$JcC<$^]2d`JcG6>JcC<$JcC<$JcC<$JcFI(e,\&!
JcC<$JcC<$JcC<$JcC<$p&EMAJcE=]JcC<$JcC<$JcC<$OT3f1TDsKBJcC<$JcC<$JcC<$X8gcOrW%NL
K`?W'JcC<$JcC<$JcEaie,Y("l2Q>7JcC<$JcC<$JcC<$iW%C-cMrIqJcC<$JcC<$JcC<$JcGZJe,Y("
Zi>UVJcC<$JcC<$JcD):e,Ym9JcC<$JcC<$JcC<$JcE%Ue,]IIJcC<$JcC<$JcC<$JcC<$c2W:
~> 0 36 m 0 0 l 360 0 l 360 36 l h W n EOD
e,Y("Y5a(QJcC<$JcC<$JcD8?e,Y^4JcC<$JcC<$JcC<$JcE4Ze,]:DJcC<$JcC<$JcC<$JcC<$df7es
JcFR+JcC<$JcC<$JcC<$JcG-;e,[AcJcC<$JcC<$JcC<$JcCQ+q>f7MJcDYJJcC<$JcC<$JcC<$U]8gD
N;nJ/JcC<$JcC<$JcC<$^Al[_nc+1?JcC<$JcC<$JcC<$JcFF'e,Y("f)L=$JcC<$JcC<$JcC<$o`*D@
]DmH^JcC<$JcC<$JcC<$O8neOiW+Q0T`9TCJcC<$JcC<$JcDbMe,Y4&JcC<$JcC<$JcC<$JcE^he,\e6
JcC<$JcC<$JcC<$JcC<$i;_:,JcF'rJcC<$JcC<$JcC<$JcGWIe,ZlUJcC<$JcC<$JcC<$JcD&9li?8M
JcD/<JcC<$JcC<$JcC<$Z2`;RJcG`LJcC<$JcC<$JcC<$JcEsoe,\P/JcC<$JcC<$JcC<$JcC<$kPs$3
JcEgkJcC<$JcC<$JcC<$K)a=#XoEtPJcC<$JcC<$JcC<$Sc@dOn,S%>P5g+5JcC<$JcC<$JcE7[e,Y("
p]#gEJcC<$JcC<$JcC<$e,Rnth#Ds*JcC<$JcC<$JcC<$JcG0<e,Y("_>f)dJcC<$JcC<$JcCT,e,ZBG
JcC<$JcC<$JcC<$JcDPGh>m9MJcCZ.JcC<$JcC<$JcC<$^]2d`JcG6>JcC<$JcC<$JcC<$JcFI(e,\&!
JcC<$JcC<$JcC<$JcC<$p&EMAJcE=]JcC<$JcC<$JcC<$OT3f1TDsKBJcC<$JcC<$JcC<$X8gcOrW%NL
K`?W'JcC<$JcC<$JcEaie,Y("l2Q>7JcC<$JcC<$JcC<$iW%C-cMrIqJcC<$JcC<$JcC<$JcGZJe,Y("
Zi>UVJcC<$JcC<$JcD):e,Ym9JcC<$JcC<$JcC<$JcE%Ue,]IIJcC<$JcC<$JcC<$JcC<$c2W:
~> 0 36 m 0 0 l 360 0 l 360 36 l h W n EOD
e,Y("Y5a(QJcC<$JcC<$JcD8?e,Y^4JcC<$JcC<$JcC<$JcE4Ze,]:DJcC<$JcC<$JcC<$JcC<$df7es
JcFR+JcC<$JcC<$JcC<$JcG-;e,[AcJcC<$JcC<$JcC<$JcCQ+q>f7MJcDYJJcC<$JcC<$JcC<$U]8gD
N;nJ/JcC<$JcC<$JcC<$^Al[_nc+1?JcC<$JcC<$JcC<$JcFF'e,Y("f)L=$JcC<$JcC<$JcC<$o`*D@
]DmH^JcC<$JcC<$JcC<$O8neOiW+Q0T`9TCJcC<$JcC<$JcDbMe,Y4&JcC<$JcC<$JcC<$JcE^he,\e6
JcC<$JcC<$JcC<$JcC<$i;_:,JcF'rJcC<$JcC<$JcC<$JcGWIe,ZlUJcC<$JcC<$JcC<$JcD&9li?8M
JcD/<JcC<$JcC<$JcC<$Z2`;RJcG`LJcC<$JcC<$JcC<$JcEsoe,\P/JcC<$JcC<$JcC<$JcC<$kPs$3
JcEgkJcC<$JcC<$JcC<$K)a=#XoEtPJcC<$JcC<$JcC<$Sc@dOn,S%>P5g+5JcC<$JcC<$JcE7[e,Y("
p]#gEJcC<$JcC<$JcC<$e,Rnth#Ds*JcC<$JcC<$JcC<$JcG0<e,Y("_>f)dJcC<$JcC<$JcCT,e,ZBG
JcC<$JcC<$JcC<$JcDPGh>m9MJcCZ.JcC<$JcC<$JcC<$^]2d`JcG6>JcC<$JcC<$JcC<$JcFI(e,\&!
JcC<$JcC<$JcC<$JcC<$p&EMAJcE=]JcC<$JcC<$JcC<$OT3f1TDsKBJcC<$JcC<$JcC<$X8gcOrW%NL
K`?W'JcC<$JcC<$JcEaie,Y("l2Q>7JcC<$JcC<$JcC<$iW%C-cMrIqJcC<$JcC<$JcC<$JcGZJe,Y("
Zi>UVJcC<$JcC<$JcD):e,Ym9JcC<$JcC<$JcC<$JcE%Ue,]IIJcC<$JcC<$JcC<$JcC<$c2W:
~> 0 36 m 0 0 l 360 0 l 360 36 l h W n EOD
e,Y("Y5a(QJcC<$JcC<$JcD8?e,Y^4JcC<$JcC<$JcC<$JcE4Ze,]:DJcC<$JcC<$JcC<$JcC<$df7es
JcFR+JcC<$JcC<$JcC<$JcG-;e,[AcJcC<$JcC<$JcC<$JcCQ+q>f7MJcDYJJcC<$JcC<$JcC<$U]8gD
N;nJ/JcC<$JcC<$JcC<$^Al[_nc+1?JcC<$JcC<$JcC<$JcFF'e,Y("f)L=$JcC<$JcC<$JcC<$o`*D@
]DmH^JcC<$JcC<$JcC<$O8neOiW+Q0T`9TCJcC<$JcC<$JcDbMe,Y4&JcC<$JcC<$JcC<$JcE^he,\e6
JcC<$JcC<$JcC<$JcC<$i;_:,JcF'rJcC<$JcC<$JcC<$JcGWIe,ZlUJcC<$JcC<$JcC<$JcD&9li?8M
JcD/<JcC<$JcC<$JcC<$Z2`;RJcG`LJcC<$JcC<$JcC<$JcEsoe,\P/JcC<$JcC<$JcC<$JcC<$kPs$3
JcEgkJcC<$JcC<$JcC<$K)a=#XoEtPJcC<$JcC<$JcC<$Sc@dOn,S%>P5g+5JcC<$JcC<$JcE7[e,Y("
p]#gEJcC<$JcC<$JcC<$e,Rnth#Ds*JcC<$JcC<$JcC<$JcG0<e,Y("_>f)dJcC<$JcC<$JcCT,e,ZBG
JcC<$JcC<$JcC<$JcDPGh>m9MJcCZ.JcC<$JcC<$JcC<$^]2d`JcG6>JcC<$JcC<$JcC<$JcFI(e,\&!
JcC<$JcC<$JcC<$JcC<$p&EMAJcE=]JcC<$JcC<$JcC<$OT3f1TDsKBJcC<$JcC<$JcC<$X8gcOrW%NL
K`?W'JcC<$JcC<$JcEaie,Y("l2Q>7JcC<$JcC<$JcC<$iW%C-cMrIqJcC<$JcC<$JcC<$JcGZJe,Y("
Zi>UVJcC<$JcC<$JcD):e,Ym9JcC<$JcC<$JcC<$JcE%Ue,]IIJcC<$JcC<$JcC<$JcC<$c2W:
~> 0 36 m 0 0 l 360 0 l 360 36 l h W n EOD
e,Y("Y5a(QJcC<$JcC<$JcD8?e,Y^4JcC<$JcC<$JcC<$JcE4Ze,]:DJcC<$JcC<$JcC<$JcC<$df7es
JcFR+JcC<$JcC<$JcC<$JcG-;e,[AcJcC<$JcC<$JcC<$JcCQ+q>f7MJcDYJJcC<$JcC<$JcC<$U]8gD
N;nJ/JcC<$JcC<$JcC<$^Al[_nc+1?JcC<$JcC<$JcC<$JcFF'e,Y("f)L=$JcC<$JcC<$JcC<$o`*D@
]DmH^JcC<$JcC<$JcC<$O8neOiW+Q0T`9TCJcC<$JcC<$JcDbMe,Y4&JcC<$JcC<$JcC<$JcE^he,\e6
JcC<$JcC<$JcC<$JcC<$i;_:,JcF'rJcC<$JcC<$JcC<$JcGWIe,ZlUJcC<$JcC<$JcC<$JcD&9li?8M
JcD/<JcC<$JcC<$JcC<$Z2`;RJcG`LJcC<$JcC<$JcC<$JcEsoe,\P/JcC<$JcC<$JcC<$JcC<$kPs$3
JcEgkJcC<$JcC<$JcC<$K)a=#XoEtPJcC<$JcC<$JcC<$Sc@dOn,S%>P5g+5JcC<$JcC<$JcE7[e,Y("
p]#gEJcC<$JcC<$JcC<$e,Rnth#Ds*JcC<$JcC<$JcC<$JcG0<e,Y("_>f)dJcC<$JcC<$JcCT,e,ZBG
JcC<$JcC<$JcC<$JcDPGh>m9MJcCZ.JcC<$JcC<$JcC<$^]2d`JcG6>JcC<$JcC<$JcC<$JcFI(e,\&!
JcC<$JcC<$JcC<$JcC<$p&EMAJcE=]JcC<$JcC<$JcC<$OT3f1TDsKBJcC<$JcC<$JcC<$X8gcOrW%NL
K`?W'JcC<$JcC<$JcEaie,Y("l2Q>7JcC<$JcC<$JcC<$iW%C-cMrIqJcC<$JcC<$JcC<$JcGZJe,Y("
Zi>UVJcC<$JcC<$JcD):e,Ym9JcC<$JcC<$JcC<$JcE%Ue,]IIJcC<$JcC<$JcC<$JcC<$c2W:
~> 0 36 m 0 0 l 360 0 l 360 36 l h W n EOD
e,Y("Y5a(QJcC<$JcC<$JcD8?e,Y^4JcC<$JcC<$JcC<$JcE4Ze,]:DJcC<$JcC<$JcC<$JcC<$df7es
JcFR+JcC<$JcC<$JcC<$JcG-;e,[AcJcC<$JcC<$JcC<$JcCQ+q>f7MJcDYJJcC<$JcC<$JcC<$U]8gD
N;nJ/JcC<$JcC<$JcC<$^Al[_nc+1?JcC<$JcC<$JcC<$JcFF'e,Y("f)L=$JcC<$JcC<$JcC<$o`*D@
]DmH^JcC<$JcC<$JcC<$O8neOiW+Q0T`9TCJcC<$JcC<$JcDbMe,Y4&JcC<$JcC<$JcC<$JcE^he,\e6
JcC<$JcC<$JcC<$JcC<$i;_:,JcF'rJcC<$JcC<$JcC<$JcGWIe,ZlUJcC<$JcC<$JcC<$JcD&9li?8M
JcD/<JcC<$JcC<$JcC<$Z2`;RJcG`LJcC<$JcC<$JcC<$JcEsoe,\P/JcC<$JcC<$JcC<$JcC<$kPs$3
JcEgkJcC<$JcC<$JcC<$K)a=#XoEtPJcC<$JcC<$JcC<$Sc@dOn,S%>P5g+5JcC<$JcC<$JcE7[e,Y("
p]#gEJcC<$JcC<$JcC<$e,Rnth#Ds*JcC<$JcC<$JcC<$JcG0<e,Y("_>f)dJcC<$JcC<$JcCT,e,ZBG
JcC<$JcC<$JcC<$JcDPGh>m9MJcCZ.JcC<$JcC<$JcC<$^]2d`JcG6>JcC<$JcC<$JcC<$JcFI(e,\&!
JcC<$JcC<$JcC<$JcC<$p&EMAJcE=]JcC<$JcC<$JcC<$OT3f1TDsKBJcC<$JcC<$JcC<$X8gcOrW%NL
K`?W'JcC<$JcC<$JcEaie,Y("l2Q>7JcC<$JcC<$JcC<$iW%C-cMrIqJcC<$JcC<$JcC<$JcGZJe,Y("
Zi>UVJcC<$JcC<$JcD):e,Ym9JcC<$JcC<$JcC<$JcE%Ue,]IIJcC<$JcC<$JcC<$JcC<$c2W:
~> 0 36 m 0 0 l 360 0 l 360 36 l h W n EOD
e,Y("Y5a(QJcC<$JcC<$JcD8?e,Y^4JcC<$JcC<$JcC<$JcE4Ze,]:DJcC<$JcC<$JcC<$JcC<$df7es
JcFR+JcC<$JcC<$JcC<$JcG-;e,[AcJcC<$JcC<$JcC<$JcCQ+q>f7MJcDYJJcC<$JcC<$JcC<$U]8gD
N;nJ/JcC<$JcC<$JcC<$^Al[_nc+1?JcC<$JcC<$JcC<$JcFF'e,Y("f)L=$JcC<$JcC<$JcC<$o`*D@
]DmH^JcC<$JcC<$JcC<$O8neOiW+Q0T`9TCJcC<$JcC<$JcDbMe,Y4&JcC<$JcC<$JcC<$JcE^he,\e6
JcC<$JcC<$JcC<$JcC<$i;_:,JcF'rJcC<$JcC<$JcC<$JcGWIe,ZlUJcC<$JcC<$JcC<$JcD&9li?8M
JcD/<JcC<$JcC<$JcC<$Z2`;RJcG`LJcC<$JcC<$JcC<$JcEsoe,\P/JcC<$JcC<$JcC<$JcC<$kPs$3
JcEgkJcC<$JcC<$JcC<$K)a=#XoEtPJcC<$JcC<$JcC<$Sc@dOn,S%>P5g+5JcC<$JcC<$JcE7[e,Y("
p]#gEJcC<$JcC<$JcC<$e,Rnth#Ds*JcC<$JcC<$JcC<$JcG0<e,Y("_>f)dJcC<$JcC<$JcCT,e,ZBG
JcC<$JcC<$JcC<$JcDPGh>m9MJcCZ.JcC<$JcC<$JcC<$^]2d`JcG6>JcC<$JcC<$JcC<$JcFI(e,\&!
JcC<$JcC<$JcC<$JcC<$p&EMAJcE=]JcC<$JcC<$JcC<$OT3f1TDsKBJcC<$JcC<$JcC<$X8gcOrW%NL
K`?W'JcC<$JcC<$JcEaie,Y("l2Q>7JcC<$JcC<$JcC<$iW%C-cMrIqJcC<$JcC<$JcC<$JcGZJe,Y("
Zi>UVJcC<$JcC<$JcD):e,Ym9JcC<$JcC<$JcC<$JcE%Ue,]IIJcC<$JcC<$JcC<$JcC<$c2W:
~> 0 36 m 0 0 l 360 0 l 360 36 l h W n EOD
e,Y("Y5a(QJcC<$JcC<$JcD8?e,Y^4JcC<$JcC<$JcC<$JcE4Ze,]:DJcC<$JcC<$JcC<$JcC<$df7es
JcFR+JcC<$JcC<$JcC<$JcG-;e,[AcJcC<$JcC<$JcC<$JcCQ+q>f7MJcDYJJcC<$JcC<$JcC<$U]8gD
N;nJ/JcC<$JcC<$JcC<$^Al[_nc+1?JcC<$JcC<$JcC<$JcFF'e,Y("f)L=$JcC<$JcC<$JcC<$o`*D@
]DmH^JcC<$JcC<$JcC<$O8neOiW+Q0T`9TCJcC<$JcC<$JcDbMe,Y4&JcC<$JcC<$JcC<$JcE^he,\e6
JcC<$JcC<$JcC<$JcC<$i;_:,JcF'rJcC<$JcC<$JcC<$JcGWIe,ZlUJcC<$JcC<$JcC<$JcD&9li?8M
JcD/<JcC<$JcC<$JcC<$Z2`;RJcG`LJcC<$JcC<$JcC<$JcEsoe,\P/JcC<$JcC<$JcC<$JcC<$kPs$3
JcEgkJcC<$JcC<$JcC<$K)a=#XoEtPJcC<$JcC<$JcC<$Sc@dOn,S%>P5g+5JcC<$JcC<$JcE7[e,Y("
p]#gEJcC<$JcC<$JcC<$e,Rnth#Ds*JcC<$JcC<$JcC<$JcG0<e,Y("_>f)dJcC<$JcC<$JcCT,e,ZBG
JcC<$JcC<$JcC<$JcDPGh>m9MJcCZ.JcC<$JcC<$JcC<$^]2d`JcG6>JcC<$JcC<$JcC<$JcFI(e,\&!
JcC<$JcC<$JcC<$JcC<$p&EMAJcE=]JcC<$JcC<$JcC<$OT3f1TDsKBJcC<$JcC<$JcC<$X8gcOrW%NL
K`?W'JcC<$JcC<$JcEaie,Y("l2Q>7JcC<$JcC<$JcC<$iW%C-cMrIqJcC<$JcC<$JcC<$JcGZJe,Y("
Zi>UVJcC<$JcC<$JcD):e,Ym9JcC<$JcC<$JcC<$JcE%Ue,]IIJcC<$JcC<$JcC<$JcC<$c2W:
~> 0 36 m 0 0 l 360 0 l 360 36 l h W n EOD
e,Y("Y5a(QJcC<$JcC<$JcD8?e,Y^4JcC<$JcC<$JcC<$JcE4Ze,]:DJcC<$JcC<$JcC<$JcC<$df7es
JcFR+JcC<$JcC<$JcC<$JcG-;e,[AcJcC<$JcC<$JcC<$JcCQ+q>f7MJcDYJJcC<$JcC<$JcC<$U]8gD
N;nJ/JcC<$JcC<$JcC<$^Al[_nc+1?JcC<$JcC<$JcC<$JcFF'e,Y("f)L=$JcC<$JcC<$JcC<$o`*D@
]DmH^JcC<$JcC<$JcC<$O8neOiW+Q0T`9TCJcC<$JcC<$JcDbMe,Y4&JcC<$JcC<$JcC<$JcE^he,\e6
JcC<$JcC<$JcC<$JcC<$i;_:,JcF'rJcC<$JcC<$JcC<$JcGWIe,ZlUJcC<$JcC<$JcC<$JcD&9li?8M
JcD/<JcC<$JcC<$JcC<$Z2`;RJcG`LJcC<$JcC<$JcC<$JcEsoe,\P/JcC<$JcC<$JcC<$JcC<$kPs$3
JcEgkJcC<$JcC<$JcC<$K)a=#XoEtPJcC<$JcC<$JcC<$Sc@dOn,S%>P5g+5JcC<$JcC<$JcE7[e,Y("
p]#gEJcC<$JcC<$JcC<$e,Rnth#Ds*JcC<$JcC<$JcC<$JcG0<e,Y("_>f)dJcC<$JcC<$JcCT,e,ZBG
JcC<$JcC<$JcC<$JcDPGh>m9MJcCZ.JcC<$JcC<$JcC<$^]2d`JcG6>JcC<$JcC<$JcC<$JcFI(e,\&!
JcC<$JcC<$JcC<$JcC<$p&EMAJcE=]JcC<$JcC<$JcC<$OT3f1TDsKBJcC<$JcC<$JcC<$X8gcOrW%NL
K`?W'JcC<$JcC<$JcEaie,Y("l2Q>7JcC<$JcC<$JcC<$iW%C-cMrIqJcC<$JcC<$JcC<$JcGZJe,Y("
Zi>UVJcC<$JcC<$JcD):e,Ym9JcC<$JcC<$JcC<$JcE%Ue,]IIJcC<$JcC<$JcC<$JcC<$c2W:
~> 0 36 m 0 35 l 360 35 l 360 36 l h W n EOD
e,Y("Y5a(QJcC<$JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$
JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$
JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$
JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$
JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$
JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$
JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$
JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$
JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$
JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$JcF!pJ,
~> restore
Q
q
95.407806 191.68288 m
45.122475 161.9426 l
42.487213 160.38354 40.514133 156.92943 40.514133 153.87045 c
40.514133 94.236687 l
40.514133 91.177719 42.487213 87.72361 45.122475 86.164551 c
95.407806 56.421589 l
98.072678 54.846405 102.06461 54.846405 104.72678 56.421589 c
155.01212 86.167244 l
157.64737 87.726295 159.62045 91.180405 159.62045 94.239372 c
159.62045 153.87045 l
159.62045 156.92943 157.64737 160.38354 155.01212 161.9426 c
104.72948 191.68288 l
102.06461 193.26074 98.072678 193.25806 95.407806 191.68288 c
h
W*
0 0 200 193 rc
1 0 0 -1 40.514133 192.86526 cm
15 dict begin
/ShadingType 2 def
/Cs1 /ColorSpace fr
/ColorSpace xd
/Coords [-8.3493671 0.17124067 127.30851 137.30153] def
/Domain [0 1] def
/Extend [true true] def
15 dict begin
/FunctionType 0 def
/BitsPerSample 8 def
/Size [ 256 ] def
/Domain [ 0 1 ] def
/Range [ 0 1 0 1 0 1 0 1 ] def
/DataSource <~
s0l\As0cV@s0cS?s0ZM>s0ZJ=s0QD<s0H;:s0H;:s0?59s0?28s06,7s0-#5s0-#5s0#o3s0#o3s/oi2
s/f`0s/f`0s/]W.s/TQ-s/TQ-s/KH+s/KH+s/B?)s/99(s/96's/00&s/00&s/''$s.s!#s.rs"s.im!
s.iius.`cts.W]ss.WZrs.NTqs.NQps.EKos.<Bms.<Bms.3<ls.39ks.*3js.!*hs.!*hs-m!fs-cpe
s-cpes-Zgcs-Zgcs-Q^as-Q^as-HX`s-HU_s-?O^s-6F\s-6F\s--@[s--=Zs-$7Ys-$4Xs,p.Ws,p.W
s,g%Us,]tTs,]tTs,TkRs,TkRs,KbPs,KbPs,B\Os,BYNs,9SMs,9PLs,0JKs,'DJs,'AIs+s;Hs+s8G
s+j2Fs+j2Fs+a)Ds+a)Ds+X#Cs+NoAs+NoAs+Ef?s+Ef?s+<`>s+<]=s+3W<s+3T;s+*N:s+*N:s+!E8
s*m?7s*m<6s*d65s*d65s*[-3s*[-3s*R$1s*R$1s*Hs0s*Hp/s*?j.s*6d-s*6a,s*-[+s*-X*s*$R)
s*$R)s)pI's)pI's)g@%s)^:$s)^:$s)U1"s)U1"s)L'us)L'us)C!ts)Bsss)9mrs)9jqs)0dps)'^o
s)'[ns(sUms(sUms(jLks(jLks(aCis(aCis(X=hs(X:gs(O4fs(F+ds(F+ds(=%cs(="bs(3qas(3n`
s(*h_s(*h_s(!_]s(!_]s'mY\s'mY\s'dPZs'dPZs'dPZs'[GXs'[GXs'RAWs'R>Vs'I8Us'I8Us'@/S
s'@/Ss'7)Rs'7)Rs'7&Qs'-uPs'-uPs'$lNs'$lNs&pfMs&pcLs&g]Ks&g]Ks&gZJs&^TIs&^TIs&UNH
s&UKGs&LEFs&LEFs&C<Ds&C<Ds&C<Ds&:3Bs&:3Bs&1-As&1*@s&($?s&($?s%ss>s%sp=s%jj<s%jj<
s%jg;s%aa:s%aa:s%XX8s%XX8s%OR7s%OO6s%FI5s%FI5s%FI5s%=@3s%=@3s%4:2s%471s%+10s%+10
s%"(.s%"(.s%"(.s$mt,s$mt,s$dn+s$dn+s$[e)s$[e)s$[e)s$R\'s$R\'s$R\'s$IV&s$IV&s$IS%
s$@M$s$@M$s$@M$s$@J#s$7D"s$7D"s$7D"s$.:us$.:us$.:us$%4ts$%4ts$%1ss#q+rs#q+rs#q+r
s#q(qs#h"ps#h"ps#h"ps#^qos#^nns#^nns#Uhms#Uhms#Uels#Uels#L_ks#L_ks#L\js#CVis#CVi

~> def currentdict end
/Function exch def currentdict end sh
Q
1 1 1 sc
q
108.27456 141.8792 m
106.01884 141.8792 104.18842 140.14542 104.18842 138.00575 c
104.18842 128.62993 l
104.18842 127.44451 103.09017 126.48489 101.7389 126.48489 c
100.38493 126.48489 99.286674 127.44451 99.286674 128.62993 c
99.286674 141.3846 l
99.286674 143.52695 97.456261 145.26073 95.200539 145.26073 c
92.942123 145.26073 91.114403 143.52695 91.114403 141.3846 c
91.114403 131.16205 l
91.114403 129.97932 90.016151 129.017 88.662178 129.017 c
87.310905 129.017 86.209961 129.97932 86.209961 131.16205 c
86.209961 134.86613 l
86.209961 137.00581 84.379539 138.74226 82.123825 138.74226 c
79.86541 138.74226 78.037682 137.0085 78.037682 134.86613 c
78.037682 126.09512 l
78.037682 124.9124 76.939438 123.95008 75.585464 123.95008 c
74.234184 123.95008 73.135933 124.9124 73.135933 126.09512 c
73.135933 127.11388 l
73.135933 129.35301 71.305519 131.1701 69.049797 131.1701 c
66.791389 131.1701 64.963661 129.35301 64.963661 127.11388 c
64.963661 114.93983 l
64.963661 112.70071 66.791389 110.88092 69.049797 110.88092 c
71.305519 110.88092 73.135933 112.69802 73.135933 114.93983 c
73.135933 115.9586 l
73.135933 117.14133 74.234184 118.10364 75.585464 118.10364 c
76.939438 118.10364 78.037682 117.14133 78.037682 115.9586 c
78.037682 102.0427 l
78.037682 99.903038 79.86541 98.166573 82.123825 98.166573 c
84.379539 98.166573 86.209961 99.903038 86.209961 102.0427 c
86.209961 121.02551 l
86.209961 122.20824 87.308212 123.17056 88.662178 123.17056 c
90.016151 123.17056 91.114403 122.20824 91.114403 121.02551 c
91.114403 111.46153 l
91.114403 109.31918 92.942123 107.5854 95.200539 107.5854 c
97.456261 107.5854 99.286674 109.31918 99.286674 111.46153 c
99.286674 118.4934 l
99.286674 119.67612 100.38493 120.63844 101.7389 120.63844 c
103.09017 120.63844 104.18842 119.67612 104.18842 118.4934 c
104.18842 110.97769 l
104.18842 108.83802 106.01884 107.10156 108.27456 107.10156 c
110.53297 107.10156 112.3607 108.83533 112.3607 110.97769 c
112.3607 138.00575 l
112.3607 140.14542 110.53297 141.8792 108.27456 141.8792 c
W*
0 0 200 193 rc
59.963661 150.26073 m
117.3607 150.26073 l
117.3607 93.166573 l
59.963661 93.166573 l
h
f
Q
q
121.35128 131.40935 m
119.09556 131.40935 117.26514 129.67557 117.26514 127.53322 c
117.26514 112.09859 l
117.26514 109.95893 119.09286 108.22247 121.35128 108.22247 c
123.607 108.22247 125.43742 109.95624 125.43742 112.09859 c
125.43742 127.53322 l
125.43742 129.67557 123.607 131.40935 121.35128 131.40935 c
W*
0 0 200 193 rc
112.26514 136.40935 m
130.43741 136.40935 l
130.43741 103.22247 l
112.26514 103.22247 l
h
f
Q
q
134.42799 123.56032 m
132.17227 123.56032 130.34186 121.82655 130.34186 119.68419 c
130.34186 115.84301 l
130.34186 113.70335 132.17227 111.96688 134.42799 111.96688 c
136.6864 111.96688 138.51413 113.70065 138.51413 115.84301 c
138.51413 119.68419 l
138.51413 121.82655 136.68372 123.56032 134.42799 123.56032 c
W*
0 0 200 193 rc
125.34186 128.56032 m
143.51413 128.56032 l
143.51413 106.96688 l
125.34186 106.96688 l
h
f
ep
end
%%Trailer
%%EOF
